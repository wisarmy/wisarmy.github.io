<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>遇一只傻喵</title><link>https://wisarmy.github.io/docs/golang/pkg/</link><description>Recent content on 遇一只傻喵</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://wisarmy.github.io/docs/golang/pkg/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://wisarmy.github.io/docs/golang/pkg/viper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wisarmy.github.io/docs/golang/pkg/viper/</guid><description>前言 # 版本 v1.7.0
更详细文档请移步至官方文档
读取文件 # viper.SetConfigName(&amp;#34;config&amp;#34;) // 文件名 viper.SetConfigType(&amp;#34;yaml&amp;#34;) // 扩展名 viper.AddConfigPath(&amp;#34;.&amp;#34;) // 添加路径 viper.ReadInConfig() // 读取 写入文件 # // 写入当前配置路径文件 (by &amp;#39;viper.AddConfigPath()&amp;#39; and &amp;#39;viper.SetConfigName()&amp;#39;) viper.WriteConfig() // 覆盖 viper.SafeWriteConfig() // 不覆盖 // 写入指定的配置文件 viper.WriteConfigAs(&amp;#34;/path/to/my/.config&amp;#34;) // 覆盖 viper.SafeWriteConfigAs(&amp;#34;/path/to/my/.config&amp;#34;) // 不覆盖 运行时重读 # 无需重启服务
viper.WatchConfig() // 告诉viper，监听配置，更改时重新载入 // 配置变更事件 viper.OnConfigChange(func(e fsnotify.Event) { fmt.Println(&amp;#34;Config file changed:&amp;#34;, e.Name) // 做一些有趣的事情，like, viper.Unmarshal to update config }) 从io.Reader读取 # viper.</description></item></channel></rss>