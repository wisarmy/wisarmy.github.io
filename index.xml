<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on 遇一只傻喵</title><link>https://wisarmy.github.io/</link><description>Recent content in Introduction on 遇一只傻喵</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 30 Dec 2021 14:01:17 +0800</lastBuildDate><atom:link href="https://wisarmy.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>git分支原理解析</title><link>https://wisarmy.github.io/docs/other/git-branch-theory-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wisarmy.github.io/docs/other/git-branch-theory-analysis/</guid><description>前言 # 1991年Linus Torvalds发明了linux内核,从此不断发展壮大,成为当前最流行操作系统之一 2002年,linus选用商业版本控制系统BitKeeper——Bitmover公司,来管理代码 2005年,linux花费十天时间用C写了一个分布式版本控制系统——git,一个月之内linux源码已用git管理 2016年,BitKeeper开源
git分支 # // 进行一次提交,看git的工作原理 $ git add README test.rb LICENSE $ git commit -m 'The initial commit of my project' // 一个commit对象 包含指向快照的指针,作者姓名,邮箱,提交信息等,还包括指向树对象的指针 // 现在，Git 仓库中有五个对象： // 三个 blob 对象（保存着文件快照） // 一个 tree 对象 （记录着目录结构和 blob 对象索引） // 一个commit对象 包含指向快照的指针,作者姓名,邮箱,等所有提交信息,还包括指向tree对象的指针,父对象的指针 第一次提交没有父对象,之后提交父对象指向上次提交 创建分支 # $ git branch testing git有一个特殊的HEAD指针,指向当前分支 $ git switch testing //切换分支只是更改了HEAD指针的指向 // 不妨提交一次 $ vim test.rb $ git commit -a -m 'made a change' // testing分支向前移动 // 切回master分支, HEAD指向master,工作区恢复到master所指向的快照内容 $ git switch master // 不妨再做次提交 $ vim test.</description></item><item><title>初识</title><link>https://wisarmy.github.io/posts/my-first-post/</link><pubDate>Thu, 30 Dec 2021 14:01:17 +0800</pubDate><guid>https://wisarmy.github.io/posts/my-first-post/</guid><description/></item><item><title/><link>https://wisarmy.github.io/docs/golang/pkg/viper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wisarmy.github.io/docs/golang/pkg/viper/</guid><description>前言 # 版本 v1.7.0
更详细文档请移步至官方文档
读取文件 # viper.SetConfigName(&amp;#34;config&amp;#34;) // 文件名 viper.SetConfigType(&amp;#34;yaml&amp;#34;) // 扩展名 viper.AddConfigPath(&amp;#34;.&amp;#34;) // 添加路径 viper.ReadInConfig() // 读取 写入文件 # // 写入当前配置路径文件 (by &amp;#39;viper.AddConfigPath()&amp;#39; and &amp;#39;viper.SetConfigName()&amp;#39;) viper.WriteConfig() // 覆盖 viper.SafeWriteConfig() // 不覆盖 // 写入指定的配置文件 viper.WriteConfigAs(&amp;#34;/path/to/my/.config&amp;#34;) // 覆盖 viper.SafeWriteConfigAs(&amp;#34;/path/to/my/.config&amp;#34;) // 不覆盖 运行时重读 # 无需重启服务
viper.WatchConfig() // 告诉viper，监听配置，更改时重新载入 // 配置变更事件 viper.OnConfigChange(func(e fsnotify.Event) { fmt.Println(&amp;#34;Config file changed:&amp;#34;, e.Name) // 做一些有趣的事情，like, viper.Unmarshal to update config }) 从io.Reader读取 # viper.</description></item></channel></rss>