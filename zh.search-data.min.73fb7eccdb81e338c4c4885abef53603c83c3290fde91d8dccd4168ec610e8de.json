[{"id":0,"href":"/docs/golang/pkg/","title":"Pkg","section":"Golang","content":"  Viper  前言 # 版本 v1.7.0 更详细文档请移步至官方文档 读取文件 # viper.SetConfigName(\u0026#34;config\u0026#34;) // 文件名 viper.SetConfigType(\u0026#34;yaml\u0026#34;) // 扩展名 viper.AddConfigPath(\u0026#34;.\u0026#34;) // 添加路径 viper.ReadInConfig() // 读取 写入文件 # // 写入当前配置路径文件 (by \u0026#39;viper.AddConfigPath()\u0026#39; and \u0026#39;viper.SetConfigName()\u0026#39;) viper.WriteConfig()\t// 覆盖 viper.SafeWriteConfig()\t// 不覆盖 // 写入指定的配置文件 viper.WriteConfigAs(\u0026#34;/path/to/my/.config\u0026#34;) // 覆盖 viper.SafeWriteConfigAs(\u0026#34;/path/to/my/.config\u0026#34;) // 不覆盖 运行时重读 # 无需重启服务 viper.WatchConfig()\t// 告诉viper，监听配置，更改时重新载入 // 配置变更事件 viper.OnConfigChange(func(e fsnotify.Event) { fmt.Println(\u0026#34;Config file changed:\u0026#34;, e.Name) // 做一些有趣的事情，like, viper.Unmarshal to update config }) 从io.Reader读取 # viper.   "},{"id":1,"href":"/docs/golang/pkg/viper/","title":"Viper","section":"Pkg","content":"前言 #  版本 v1.7.0\n更详细文档请移步至官方文档\n读取文件 #  viper.SetConfigName(\u0026#34;config\u0026#34;) // 文件名 viper.SetConfigType(\u0026#34;yaml\u0026#34;) // 扩展名 viper.AddConfigPath(\u0026#34;.\u0026#34;) // 添加路径 viper.ReadInConfig() // 读取 写入文件 #  // 写入当前配置路径文件 (by \u0026#39;viper.AddConfigPath()\u0026#39; and \u0026#39;viper.SetConfigName()\u0026#39;) viper.WriteConfig()\t// 覆盖 viper.SafeWriteConfig()\t// 不覆盖 // 写入指定的配置文件 viper.WriteConfigAs(\u0026#34;/path/to/my/.config\u0026#34;) // 覆盖 viper.SafeWriteConfigAs(\u0026#34;/path/to/my/.config\u0026#34;) // 不覆盖 运行时重读 #  无需重启服务\nviper.WatchConfig()\t// 告诉viper，监听配置，更改时重新载入 // 配置变更事件 viper.OnConfigChange(func(e fsnotify.Event) { fmt.Println(\u0026#34;Config file changed:\u0026#34;, e.Name) // 做一些有趣的事情，like, viper.Unmarshal to update config }) 从io.Reader读取 #  viper.SetConfigType(\u0026#34;toml\u0026#34;)\t// 设置配置类型 var configExample = `debug = true`\t// 定义配置内容 viper.ReadConfig(bytes.NewBufferString(configExample))\t// bytes.Buffer实现了io.Reader接口 fmt.Println(viper.GetBool(\u0026#34;debug\u0026#34;)) // true 设置配置 #  viper.SetDefault(\u0026#34;debug\u0026#34;, false)\t// 设置默认值 viper.SetDefault(\u0026#34;jwt\u0026#34;, map[string]string{\u0026#34;aglo\u0026#34;: \u0026#34;HS256\u0026#34;, \u0026#34;secret\u0026#34;: \u0026#34;\u0026#34;})\t// 更复杂结构 viper.Set(\u0026#34;debug\u0026#34;, true)\t// 有时我们需要在程序逻辑中更改或命令行flag来控制 别名 #  多个键引用一个值, 如果配置名称需变更，无需改动业务程序\nviper.RegisterAlias(\u0026#34;glad\u0026#34;, \u0026#34;pleased\u0026#34;) viper.Set(\u0026#34;glad\u0026#34;, \u0026#34;happy\u0026#34;) viper.GetString(\u0026#34;pleased\u0026#34;)\t// happy with flag #  // 使用标准库 flag flag.String(\u0026#34;config\u0026#34;, \u0026#34;app.toml\u0026#34;, \u0026#34;config filename\u0026#34;) flag.Parse() // 设置pflag pflag.CommandLine.AddGoFlagSet(flag.CommandLine)\t// 若以上使用pflag，无需此操作 viper.BindPFlags(pflag.CommandLine) viper.GetString(\u0026#34;config\u0026#34;) "}]